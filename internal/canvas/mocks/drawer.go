// Code generated by MockGen. DO NOT EDIT.
// Source: internal/canvas/drawer.go

// Package mock_canvas is a generated GoMock package.
package mock_canvas

import (
	reflect "reflect"
	canvas "sketch/internal/canvas"

	gomock "github.com/golang/mock/gomock"
)

// MockDrawer is a mock of Drawer interface.
type MockDrawer struct {
	ctrl     *gomock.Controller
	recorder *MockDrawerMockRecorder
}

// MockDrawerMockRecorder is the mock recorder for MockDrawer.
type MockDrawerMockRecorder struct {
	mock *MockDrawer
}

// NewMockDrawer creates a new mock instance.
func NewMockDrawer(ctrl *gomock.Controller) *MockDrawer {
	mock := &MockDrawer{ctrl: ctrl}
	mock.recorder = &MockDrawerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDrawer) EXPECT() *MockDrawerMockRecorder {
	return m.recorder
}

// Draw mocks base method.
func (m *MockDrawer) Draw(requests []canvas.DrawRequest) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Draw", requests)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Draw indicates an expected call of Draw.
func (mr *MockDrawerMockRecorder) Draw(requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Draw", reflect.TypeOf((*MockDrawer)(nil).Draw), requests)
}
